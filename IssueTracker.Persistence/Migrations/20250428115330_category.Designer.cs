// <auto-generated />
using System;
using IssueTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IssueTracker.Persistence.Migrations
{
    [DbContext(typeof(IssueTrackerDbContext))]
    [Migration("20250428115330_category")]
    partial class category
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IssueTracker.Domain.Entities.AffectedPlatform", b =>
                {
                    b.Property<Guid>("AffectedPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssuePlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AffectedPlatformId");

                    b.HasIndex("IssueId");

                    b.ToTable("AffectedPlatforms");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentId");

                    b.HasIndex("IssueId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76b7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "General Issue"
                        },
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76c7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Maintenance"
                        },
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76d7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Engineering"
                        },
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76e7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Accounts"
                        },
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76f7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Feedback"
                        },
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc7617c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Helpdesk"
                        });
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Issue", b =>
                {
                    b.Property<Guid>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssueType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Resolved")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SoftwareComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SoftwareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SoftwarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IssueId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AuthorId = "A0788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76c7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add shopping cart feature to the app for Mariams's biscuits.",
                            IssueType = 1,
                            OwnerId = "C0788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            Priority = 1,
                            Resolved = new DateTime(2025, 4, 28, 13, 53, 29, 941, DateTimeKind.Local).AddTicks(9827),
                            Severity = 3,
                            Status = 2,
                            Summary = "The feature has been added."
                        },
                        new
                        {
                            IssueId = new Guid("d0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AuthorId = "E0788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76d7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add documentation for the new shopping cart feature.",
                            IssueType = 6,
                            OwnerId = "F0788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            Priority = 1,
                            Severity = 3,
                            Status = 1,
                            Summary = "Docs almost complete."
                        },
                        new
                        {
                            IssueId = new Guid("a1788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AuthorId = "A2788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76b7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The clients app has crashed. The issue is with the EC2 instance that keeps stopping for no clear reason.",
                            IssueType = 3,
                            OwnerId = "A30788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            Priority = 2,
                            Severity = 1,
                            Status = 0,
                            Summary = "The EC2 instance just stopped."
                        },
                        new
                        {
                            IssueId = new Guid("a4788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AuthorId = "A5788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76c7c5dde"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add shopping cart feature to the app for Mariams's biscuits",
                            IssueType = 2,
                            OwnerId = "A6788D2F-8003-43C1-92A4-EDC76A7C5DDE",
                            Priority = 0,
                            Resolved = new DateTime(2025, 4, 28, 13, 53, 29, 941, DateTimeKind.Local).AddTicks(9933),
                            Severity = 3,
                            Status = 2,
                            Summary = "Call the client."
                        });
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.IssueSymptomRecord", b =>
                {
                    b.Property<Guid>("IssueSymptomRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SymptomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueSymptomRecordId");

                    b.HasIndex("IssueId");

                    b.ToTable("IssueSymptomRecords");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.RelatedIssueRecord", b =>
                {
                    b.Property<Guid>("RelatedIssueRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RelatedIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RelatedIssueRecordId");

                    b.HasIndex("IssueId");

                    b.ToTable("RelatedIssueRecords");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.AffectedPlatform", b =>
                {
                    b.HasOne("IssueTracker.Domain.Entities.Issue", null)
                        .WithMany("IssueAffectedPlatforms")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("IssueTracker.Domain.Entities.Issue", null)
                        .WithMany("Attachments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Issue", b =>
                {
                    b.HasOne("IssueTracker.Domain.Entities.Category", "Category")
                        .WithMany("Issues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.IssueSymptomRecord", b =>
                {
                    b.HasOne("IssueTracker.Domain.Entities.Issue", null)
                        .WithMany("IssueSymptomRecords")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.RelatedIssueRecord", b =>
                {
                    b.HasOne("IssueTracker.Domain.Entities.Issue", null)
                        .WithMany("RelatedIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Category", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("IssueTracker.Domain.Entities.Issue", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("IssueAffectedPlatforms");

                    b.Navigation("IssueSymptomRecords");

                    b.Navigation("RelatedIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
